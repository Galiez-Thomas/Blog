swagger: "2.0"
info:
  description: "Exercice formation DWWM - API placeholder Blog"
  version: "1.0.0"
  title: "Swagger BLOG"
  contact:
    email: "thomas.galiez@live.fr"
host: "localhost:3000"
basePath: "/"
tags:
- name: "users"
- name: "posts"
- name: "comments"
schemes:
- "https"
- "http"
paths:
  /users:
    post:
      tags:
      - "users"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/users"
      responses:
        default:
          description: "successful operation"
    get:
      tags:
      - "users"
      summary: "Get all users"
      description: ""
      operationId: "getUsers"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/users"
        "400":
          description: "Invalid supplied"
        "404":
          description: "Users not found"
  /users/{id}:
    get:
      tags:
      - "users"
      summary: "Get user by user id"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/users"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "users"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/users"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "users"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /posts:
    post:
      tags:
      - "posts"
      summary: "Create posts"
      description: "Create post"
      operationId: "createPost"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created post object"
        required: true
        schema:
          $ref: "#/definitions/posts"
      responses:
        default:
          description: "successful operation"
    get:
      tags:
      - "posts"
      summary: "Get all posts"
      description: ""
      operationId: "getPosts"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/posts"
        "400":
          description: "Invalid supplied"
        "404":
          description: "Posts not found"
  /posts/{id}:
    get:
      tags:
      - "posts"
      summary: "Get post by id"
      description: ""
      operationId: "getPostById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/posts"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Post not found"
    put:
      tags:
      - "posts"
      summary: "Updated post"
      operationId: "updatePost"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated posts object"
        required: true
        schema:
          $ref: "#/definitions/posts"
      responses:
        "400":
          description: "Invalid post supplied"
        "404":
          description: "Post not found"
    delete:
      tags:
      - "posts"
      summary: "Delete post"
      operationId: "deletePost"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /posts/userid/{userid}:
    get:
      tags:
      - "posts"
      summary: "Get posts by userid"
      description: ""
      operationId: "getPostByUserid"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/posts"
        "400":
          description: "Invalid userid supplied"
        "404":
          description: "Posts not found"
  /comments:
    post:
      tags:
      - "comments"
      summary: "Create comment"
      operationId: "createComment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created comment object"
        required: true
        schema:
          $ref: "#/definitions/comments"
      responses:
        default:
          description: "successful operation"
    get:
      tags:
      - "comments"
      summary: "Get all comments"
      description: ""
      operationId: "getComments"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/comments"
        "400":
          description: "Invalid supplied"
        "404":
          description: "comments not found"
  /comments/{id}:
    get:
      tags:
      - "comments"
      summary: "Get comment by id"
      description: ""
      operationId: "getCommentById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/posts"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Comment not found"
    put:
      tags:
      - "comments"
      summary: "Updated comment"
      operationId: "updateComment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated comment object"
        required: true
        schema:
          $ref: "#/definitions/comments"
      responses:
        "400":
          description: "Invalid comment supplied"
        "404":
          description: "Comment not found"
    delete:
      tags:
      - "comments"
      summary: "Delete comment"
      operationId: "deleteComment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid comment supplied"
        "404":
          description: "Comment not found"
  /posts/postid/{postid}:
    get:
      tags:
      - "comments"
      summary: "Get comments by postid"
      description: ""
      operationId: "getCommentByPostid"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "postid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/comments"
        "400":
          description: "Invalid postid supplied"
        "404":
          description: "Comment not found"
definitions:
  users:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      username:
        type: "string"
      email:
        type: "string"
      address_street:
        type: "string"
      address_suite:
        type: "string"
      address_city:
        type: "string"
      address_zipcode:
        type: "integer"
      address_geo_lat:
        type: "string"
      address_geo_lng:
        type: "string"
      phone:
        type: "string"
      website:
        type: "string"
      company_name:
        type: "string"
      company_catchphrase:
        type: "string"
      company_bs:
        type: "string"
    xml:
      name: "User"
  posts:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userid:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      body:
        type: "string"
  comments:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      postid:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      body:
        type: "string"